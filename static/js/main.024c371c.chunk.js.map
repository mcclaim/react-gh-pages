{"version":3,"sources":["components/header/index.js","components/header/header.js","components/news-list-item/index.js","components/news-list-item/news-list-item.js","components/news-item-detail/index.js","components/news-item-detail/news-item-detail.js","components/news-list/index.js","components/news-list/news-list.js","components/app/index.js","components/app/app.js","serviceWorker.js","index.js"],"names":["Header","newsReadCount","this","props","className","Component","NewsListItem","getDetail","bind","article","href","src","alt","title","body","onClick","e","preventDefault","detail","id","NewsItemDetail","state","comments","error","isLoading","renderComments","length","map","comment","key","name","email","articleInfo","setState","fetch","then","response","ok","json","data","catch","NewsList","API","renderNews","newsList","item","getItemDetail","articleId","readCount","countIncrement","newsDetail","toggleModal","renderNewsItemDetail","modal","modalClassName","setTimeout","document","style","cssText","modalStyle","modalStyles","display","paddingRight","overflowY","Fragment","role","aria-labelledby","aria-hidden","type","data-dismiss","aria-label","App","getNewsReadCount","count","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.024c371c.chunk.js","sourcesContent":["import Header from './header';\r\n\r\nexport default Header;","import React, {Component} from 'react';\r\nimport './header.css';\r\n\r\nexport default class Header extends Component {\r\n    render() {\r\n        const {newsReadCount} = this.props;\r\n        return (\r\n            <header className=\"header-box\">\r\n                <div className=\"page-header\">\r\n                    <h2>Тестовый вывод новостей</h2>\r\n                    <p className=\"lead\">Новостей прочитано: {newsReadCount}</p>\r\n                </div>\r\n            </header>\r\n        );\r\n    }\r\n}","import NewsListItem from './news-list-item';\r\n\r\nexport default NewsListItem;","import React, {Component} from 'react';\r\nimport './news-list-item.css';\r\n\r\nexport default class NewsListItem extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getDetail = this.getDetail.bind(this);\r\n    }\r\n\r\n    render() {\r\n        const {article} = this.props;\r\n        return (\r\n            <div className=\"col-xs-12 col-sm-4\">\r\n                <div className=\"news_item\">\r\n                    <div className=\"news_item_img\">\r\n                        <a href=\"/#\"><img src=\"https://mcclaim.github.io/uzinfocom/images/news1.jpg\" alt=\"soveshaniya\"/></a>\r\n                    </div>\r\n                    <div className=\"news_item_block\">\r\n                        <div className=\"news_inform_wrap\">\r\n                            <a className=\"news_item_title\" href=\"/#\"> {article.title} </a>\r\n                            <div className=\"news_item_text\">{article.body}</div>\r\n                        </div>\r\n                        <a className=\"button\" href=\"/#\" onClick={this.getDetail}>Подробнее</a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    getDetail(e) {\r\n        e.preventDefault();\r\n        this.props.detail(this.props.article.id);\r\n    };\r\n}","import NewsItemDetail from './news-item-detail';\r\n\r\nexport default NewsItemDetail;","import React, {Component} from 'react';\r\nimport './news-item-detail.css';\r\n\r\nexport default class NewsItemDetail extends Component {\r\n\r\n    state = {\r\n        comments: [],\r\n        error: '',\r\n        isLoading: false\r\n    };\r\n\r\n    componentDidMount() {\r\n        const {articleInfo} = this.props;\r\n        this.setState({isLoading: true});\r\n        fetch(`https://jsonplaceholder.typicode.com/posts/${articleInfo.id}/comments`)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then(data => this.setState({comments: data, isLoading: false}))\r\n            .catch(error => this.setState({error, isLoading: false}));\r\n    }\r\n\r\n    renderComments = () => {\r\n        const {comments, isLoading} = this.state;\r\n        if (isLoading) {\r\n            return <p>Загрузка ...</p>;\r\n        }\r\n        if (!comments.length) {\r\n            return <p>К сожалению комментарий нет</p>\r\n        }\r\n        return (\r\n            comments.map((comment) => {\r\n                return (\r\n                    <li className=\"list-group-item\" key={comment.id}>\r\n                        <div className=\"text-primary\"><b>Имя: {comment.name}</b></div>\r\n                        <div className=\"text-warning\"><b>Емаил: {comment.email}</b></div>\r\n                        <p>Комментарий: {comment.body}</p>\r\n                    </li>\r\n                );\r\n            })\r\n        );\r\n    };\r\n\r\n    render() {\r\n        const {articleInfo} = this.props;\r\n        return (\r\n            <div>\r\n                <div className=\"card\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title text-primary\">Заголовок: {articleInfo.title}</h5>\r\n                        <p className=\"card-text\">Описания: {articleInfo.body}</p>\r\n                    </div>\r\n                </div>\r\n                <h2>Комментарии: </h2>\r\n                <div className=\"card\">\r\n                    <ul className=\"list-group list-group-flush\">\r\n                        {this.renderComments()}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import NewsList from './news-list';\r\n\r\nexport default NewsList;","import React, {Component} from 'react';\r\nimport './news-list.css';\r\nimport NewsListItem from \"../news-list-item\";\r\nimport NewsItemDetail from \"../news-item-detail\";\r\n\r\nexport default class NewsList extends Component {\r\n\r\n    API = 'https://jsonplaceholder.typicode.com/posts?userId=1';\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            newsList: [],\r\n            isLoading: false,\r\n            error: null,\r\n            modal: false,\r\n            modalStyles: {},\r\n            modalClassName: '',\r\n            newsDetail: {},\r\n            readCount: 0\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({isLoading: true});\r\n        fetch(this.API)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then(data => this.setState({newsList: data, isLoading: false}))\r\n            .catch(error => this.setState({error, isLoading: false}));\r\n    }\r\n\r\n    renderNews = () => {\r\n        const {newsList, isLoading} = this.state;\r\n        if (isLoading) {\r\n            return <p>Загрузка ...</p>;\r\n        }\r\n        if (!newsList.length) {\r\n            return <p>К сожалению новостей нет</p>\r\n        }\r\n        return (\r\n            newsList.map((item) => {\r\n                return <NewsListItem key={item.id} article={item} detail={this.getItemDetail}/>\r\n            })\r\n        );\r\n    };\r\n\r\n    getItemDetail = (articleId) => {\r\n        let {readCount} = this.state;\r\n        const {newsReadCount} = this.props;\r\n        fetch(`https://jsonplaceholder.typicode.com/posts/${articleId}`)\r\n            .then(response => {\r\n                if (response.ok) {\r\n                    return response.json();\r\n                }\r\n            })\r\n            .then(data => {\r\n                let countIncrement = readCount + 1;\r\n                this.setState({newsDetail: data, readCount: countIncrement});\r\n                newsReadCount(countIncrement);\r\n                this.toggleModal();\r\n                this.renderNewsItemDetail();\r\n            })\r\n            .catch(error => this.setState({error, isLoading: false}));\r\n    };\r\n\r\n    renderNewsItemDetail = () => {\r\n        const {newsDetail} = this.state;\r\n        if (!newsDetail.id) {\r\n            return null;\r\n        }\r\n        return <NewsItemDetail key={newsDetail.id} articleInfo={newsDetail} />;\r\n    };\r\n\r\n    toggleModal = () => {\r\n        const {modal} = this.state;\r\n        const styles = {\r\n            display: 'block',\r\n            paddingRight: '17px',\r\n            overflowY: 'auto'\r\n        };\r\n        if (modal) {\r\n            this.setState({modalClassName: ''});\r\n            setTimeout(() => {\r\n                document.body.style.cssText = \"overflow: auto; padding-right: 0\";\r\n                this.setState({modalStyle:{}, modal: false});\r\n            }, 150);\r\n            return false;\r\n        }\r\n        document.body.style.cssText = \"overflow: hidden; padding-right: 17px\";\r\n        this.setState({modal: true, modalStyles: styles});\r\n        setTimeout(() => {this.setState({modalClassName: 'show'})}, 150)\r\n    };\r\n\r\n    render() {\r\n        const {modal, modalStyles, modalClassName} = this.state;\r\n        return (\r\n            <section className=\"news\">\r\n                <div className=\"row\">\r\n                    {this.renderNews()}\r\n                </div>\r\n\r\n                {\r\n                    modal &&\r\n                    <React.Fragment>\r\n                        <div className={`modal fade ${modalClassName}`} style={modalStyles} id=\"exampleModal\" role=\"dialog\" aria-labelledby=\"exampleModalLabel\" aria-hidden=\"true\">\r\n                            <div className=\"modal-dialog\" role=\"document\">\r\n                                <div className=\"modal-content\">\r\n                                    <div className=\"modal-header\">\r\n                                        <h5 className=\"modal-title\" id=\"exampleModalLabel\">Modal title</h5>\r\n                                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" onClick={this.toggleModal}>\r\n                                            <span aria-hidden=\"true\">&times;</span>\r\n                                        </button>\r\n                                    </div>\r\n                                    <div className=\"modal-body\">\r\n                                        { this.renderNewsItemDetail() }\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={`modal-backdrop fade ${modalClassName}`} onClick={this.toggleModal}> </div>\r\n                    </React.Fragment>\r\n                }\r\n\r\n            </section>\r\n        );\r\n    }\r\n}","import App from './app';\r\n\r\nexport default App;","import React, {Component} from 'react';\r\nimport './app.css'\r\nimport Header from \"../header\";\r\nimport NewsList from \"../news-list\";\r\n\r\nexport default class App extends Component {\r\n\r\n    state = {\r\n        newsReadCount: 0\r\n    };\r\n\r\n    getNewsReadCount = (count) => {\r\n        this.setState({newsReadCount: count});\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className=\"container\">\r\n                    <Header newsReadCount={this.state.newsReadCount} />\r\n                    <NewsList newsReadCount={this.getNewsReadCount} />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}